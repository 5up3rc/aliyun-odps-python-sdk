# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the PyODPS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyODPS 0.7.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-19 17:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../source/base-models.rst:4
msgid "XFlow 和模型"
msgstr ""

#: ../../source/base-models.rst:7
msgid "XFlow"
msgstr ""

#: ../../source/base-models.rst:9
msgid "XFlow 是 ODPS 对算法包的封装，使用 PyODPS 可以执行 XFlow。对于下面的 PAI 命令："
msgstr ""

#: ../../source/base-models.rst:15
msgid "可以使用如下方法调用："
msgstr ""

#: ../../source/base-models.rst:23
msgid "或者使用同步调用："
msgstr ""

#: ../../source/base-models.rst:31
msgid ""
"这两个方法都会返回一个 Instance 对象。由于 XFlow 的一个 Instance 包含若干个子 Instance， "
"需要使用下面的方法来获得每个 Instance 的 LogView："
msgstr ""

#: ../../source/base-models.rst:39
msgid ""
"需要注意的是，get_xflow_sub_instances 返回的是 Instance 当前的子 "
"Instance，可能会随时间变化，因而可能需要定时查询。"
msgstr ""

#: ../../source/base-models.rst:41
msgid "在调用 run_xflow 或者 execute_xflow 时，也可以指定运行参数，指定的方法与 SQL 类似："
msgstr ""

#: ../../source/base-models.rst:48
msgid "使用 options.ml.xflow_settings 可以配置全局设置："
msgstr ""

#: ../../source/base-models.rst:58
msgid "离线模型"
msgstr ""

#: ../../source/base-models.rst:60
msgid ""
"离线模型是 XFlow 分类 / 回归算法输出的模型。用户可以使用 PyODPS ML 或直接使用 odps.run_xflow "
"创建一个离线模型，例如下面使用 run_xflow 的例子："
msgstr ""

#: ../../source/base-models.rst:69
msgid "在模型创建后，用户可以列出当前 Project 下的模型："
msgstr ""

#: ../../source/base-models.rst:75
msgid "也可以通过模型名获取模型并读取模型 PMML（如果支持）："
msgstr ""

#: ../../source/base-models.rst:82
msgid "删除模型可使用下列语句："
msgstr ""

#: ../../source/base-models.rst:89
msgid "在线模型"
msgstr ""

#: ../../source/base-models.rst:91
msgid "在线模型是 ODPS 提供的模型在线部署能力。用户可以通过 Pipeline 部署自己的模型。详细信息请参考“机器学习平台——在线服务”章节。"
msgstr ""

#: ../../source/base-models.rst:93
msgid "需要注意的是，在线模型的服务使用的是独立的 Endpoint，需要配置 Predict Endpoint。通过"
msgstr ""

#: ../../source/base-models.rst:100
msgid "即可在 ODPS 对象上添加相关配置。Predict Endpoint 的地址请参考相关说明或咨询管理员。"
msgstr ""

#: ../../source/base-models.rst:103
msgid "部署离线模型上线"
msgstr ""

#: ../../source/base-models.rst:105
msgid "PyODPS 提供了离线模型的部署功能。部署方法为"
msgstr ""

#: ../../source/base-models.rst:113
msgid "部署自定义 Pipeline 上线"
msgstr ""

#: ../../source/base-models.rst:114
msgid "含有自定义 Pipeline 的在线模型可自行构造 ModelPredictor 对象，例子如下："
msgstr ""

#: ../../source/base-models.rst:130
msgid ""
"其中，BuiltinProcessor、PmmlProcessor 和 CustomProcessor 分别指 ODPS OfflineModel"
" 形成的 Pipeline 节点、PMML 模型文件形成的 Pipeline 节点和用户自行开发的 Pipeline 节点。"
msgstr ""

#: ../../source/base-models.rst:134
msgid "在线模型操作"
msgstr ""

#: ../../source/base-models.rst:136
msgid "与其他 ODPS 对象类似，创建后，可列举、获取和删除在线模型："
msgstr ""

#: ../../source/base-models.rst:144
msgid "可使用模型名和数据进行在线预测，输入数据可以是 Record，也可以是字典或数组和 Schema 的组合："
msgstr ""

#: ../../source/base-models.rst:152
msgid ""
"也可为模型设置 ABTest。参数中的 modelx 可以是在线模型名，也可以是 get_online_model 获得的模型对象本身，而 "
"percentagex 表示 modelx 在 ABTest 中所占的百分比，范围为 0 至 100："
msgstr ""

#: ../../source/base-models.rst:159
msgid "修改模型参数可以通过修改 OnlineModel 对象的属性，再调用 update 方法实现，如"
msgstr ""

#: ../../source/base-models.rst:167
msgid ""
"与其他对象不同的是，在线模型的创建和删除较为耗时。PyODPS 默认 create_online_model 和 "
"delete_online_model 以及 OnlineModel 的 update 方法在整个操作完成后才返回。用户可以通过 async "
"选项控制是否要在模型创建请求提交后立即返回， 然后自己控制等待。例如，下列语句"
msgstr ""

#: ../../source/base-models.rst:175 ../../source/base-models.rst:188
msgid "等价于"
msgstr ""

#: ../../source/base-models.rst:182
msgid "而"
msgstr ""

